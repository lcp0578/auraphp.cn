---
title: A Peek At Aura v2 -- Aura.Web
layout: post
tags : [v2, web]
author : Paul M. Jones
---

In the [lessons learned][] post a few weeks ago, I wrote about how [Aura][]
was born of the idea that we could extract independent decoupled packages from
[Solar][], and how in doing so, we discovered that some of those extracted
packages themsleves could be further split into independent pieces.

The last example of this was how [we extracted Aura.Dispatcher][] from three
separate packages. Today, I'm going to talk about how the [Aura.Web v2][]
package has been slimmed down as a result of Aura.Dispatcher being created.
(Incidentally, [Aura.Web v2][] is also PHP 5.3 compatible!)


### Aura.Web, version 1

Aura.Web v1 took the parts of [Solar][] related to web controllers and
combined them into a single independent package. The v1 package contains ...

- a _ControllerInterface_ along with an _AbstractPage_ controller object to
  provide a base controller for web actions;

- a _Context_ object to represent the web request for the controller;

- a _Response_ data-transfer object to represent the web response from the
  controller;

- an _Accept_ object to deal with content-type, language, charset, and
  encoding negotiation;

- a _RendererInterface_ along with an _AbstractRenderer_ to allow controller
  implementation authors to use any rendering system they liked, such as
  [Mustache][] or [Aura.View][]; and,

- a segregated _SignalInterface_ and a bare-bones _Signal_ implementation
  to handle controller hooks like pre-action, post-action, etc.

As I said in the [peek at Aura.Sql v2][] post, when you are used to certain
things always being bundled together, it can be hard to see how they could be
separated. In the Aura.Sql case, we moved some of the functionality around so
that connections, schema discovery, and query building could become
independent of each other; the no longer needed to be provided simultaneously.

In the Aura.Web case, it turns out extracting [Aura.Dispatcher][] was the key
to reducing the Aura.Web package contents. With Aura.Dispatcher, any object
can be a controller, since it can dispatch to any method on any object (as
well as dispatching to closures). In turn, there is no more need for the
Aura.Web package to provide a base controller with interfaces for various
implementations. Instead, you can dispatch to any object you like, with the
dependencies you prefer, as your controller. That controller object can be
implemented at the framework level, or in a separate package or bundle.

As a result, this means that web-specific request and response objects can be
in their own package independent of any particular controller implementation.
The [Aura.Web v2][] package contains only those request and response objects.

### Request

First, the [Aura.Web v2][] _Request_ object is **not** an HTTP request
representation. It contains copies of `$_ENV`, `$_SERVER`, etc., that are
clearly not part of an HTTP request proper. More strictly speaking, the
_Request_ object represents the **web request execution environment** of PHP.

The _Request_ object has various sub-objects representing all of the
[PHP superglobals](https://github.com/auraphp/Aura.Web/blob/2.x/README-REQUEST.md#superglobals),
along with objects for ...

- [the client making the request](https://github.com/auraphp/Aura.Web/blob/2.x/README-REQUEST.md#client),
- [the raw body of the request](https://github.com/auraphp/Aura.Web/blob/2.x/README-REQUEST.md#content),
- [the request headers](https://github.com/auraphp/Aura.Web/blob/2.x/README-REQUEST.md#headers),
- [the request method](https://github.com/auraphp/Aura.Web/blob/2.x/README-REQUEST.md#method),
- [content negotiation](https://github.com/auraphp/Aura.Web/blob/2.x/README-REQUEST.md#accept),
- [arbitrary path-info parameters](https://github.com/auraphp/Aura.Web/blob/2.x/README-REQUEST.md#params),
  such as those generated by a [router][], and
- [the request URL](https://github.com/auraphp/Aura.Web/blob/2.x/README-REQUEST.md#url).

The _Request_ object can be used in any controller (or any other object,
really).


### Response

As with the _Request_ object, the _Response_ object only describes the web
response, and is not an HTTP response proper.  It has sub-objects for ...

- [status headers](https://github.com/auraphp/Aura.Web/blob/2.x/README-RESPONSE.md#status),
- [cache headers](https://github.com/auraphp/Aura.Web/blob/2.x/README-RESPONSE.md#cache)
- [cookie headers](https://github.com/auraphp/Aura.Web/blob/2.x/README-RESPONSE.md#cookies),
- [redirection headers](https://github.com/auraphp/Aura.Web/blob/2.x/README-RESPONSE.md#redirect),
- [all other headers](https://github.com/auraphp/Aura.Web/blob/2.x/README-RESPONSE.md#headers), and
- [the response content](https://github.com/auraphp/Aura.Web/blob/2.x/README-RESPONSE.md#content),
  along with convenience methods related to content type, charset, disposition, and filename.

Once you have built a _Response_ object with any controller of your
preference, you can send it with any HTTP mechanism you like, including
[plain PHP](https://github.com/auraphp/Aura.Web/blob/2.x/README-RESPONSE.md#sending-the-response).


### Conclusion

Whereas the v1 package included controllers, renderers, and other
functionality, the [Aura.Web v2][] package provides only _Request_ and
_Response_ objects. These objects are independent of any particular controller
system, and independent of any specific HTTP delivery mechanism, which means
they can be used in any new or existing codebase without introducing other
dependencies.

By extracting functionality to independent packages, [Aura][] v2 continues to
make good on its core promises. If you like clean code, fully decoupled
libraries, and truly independent packages, then [the Aura project][Aura] is
for you. Download a single package and start using it in your project today,
with no added dependencies.


[Aura.Dispatcher]: https://github.com/auraphp/Aura.Dispatcher
[Aura.Web v2]: https://github.com/auraphp/Aura.Web/tree/2.x
[Aura.Web]: http://github.com/auraphp/Aura.Web
[Aura]: http://auraphp.com
[Solar]: http://solarphp.com
[full description]: https://github.com/auraphp/Aura.Dispatcher#refactoring-to-architecture-changes
[lessons learned]: http://auraphp.com/blog/2013/09/30/lessons-learned/
[peek at Aura.Sql v2]: http://auraphp.com/blog/2013/10/21/aura-sql-v2-extended-pdo/
[router]: http://github.com/auraphp/Aura.Router
[we extracted Aura.Dispatcher]: http://auraphp.com/blog/2013/11/04/aura-v2-dispatcher/
[Aura.View]: https://github.com/auraphp/Aura.View
[Mustache]: https://github.com/bobthecow/mustache.php
